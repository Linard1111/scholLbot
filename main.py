import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
import database

# —Ç—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

API_TOKEN = '—Ç–æ–∫–µ–Ω —Å–≤–æ–π'  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_ID = –∞–π–¥–∏ —Å–≤–æ–π  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
SCHEDULE_IMAGE_SHIFT_1 = "/root/liceybot/shift_1_schedule.jpg" #–Ω–∞ –≤–∞—à–∏ –ø—É—Ç–∏ –ø–æ–º–µ–Ω—è–π—Ç–µ–º 1 —Å–º–µ–Ω–∞
SCHEDULE_IMAGE_SHIFT_2 = "/root/liceybot/shift_2_schedule.jpg" #–Ω–∞ –≤–∞—à–∏ –ø—É—Ç–∏ –ø–æ–º–µ–Ω—è–π—Ç–µ–º 2 —Å–º–µ–Ω–∞

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    logging.info(f"–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    conn = database.create_connection("bot_database.db")
    user = database.get_user(conn, message.from_user.id)

    if not user:
        username = message.from_user.username if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        database.add_user(conn, message.from_user.id, username)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å.")

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞: @{username} (ID: {message.from_user.id})")
    else:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!")

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ó–≤–æ–Ω–∫–æ–≤", callback_data="schedule_calls"),
                types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ù–∞ –ó–∞–≤—Ç—Ä–∞", callback_data="schedule"))
    keyboard.add(types.InlineKeyboardButton("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –î–Ω–µ–≤–Ω–∏–∫", url="t.me/liceyufaabot/elschool"), 
                types.InlineKeyboardButton("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events"))
    keyboard.add(types.InlineKeyboardButton("–°–∫–æ–ª—å–∫–æ –û—Å—Ç–∞–ª–æ—Å—å –î–æ –õ–µ—Ç–∞", callback_data="time_until_summer"))
    keyboard.add(types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
    keyboard.add(types.InlineKeyboardButton("FAQ", url="https://telegra.ph/FAQ-po-botu-12-02"))

    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ —à–∫–æ–ª—ã 94 –ª–∏—Ü–µ–π! –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:\n\n–¢–∞–∫–∂–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø–æ–¥—Å–ª—É—à–∞–Ω–æ 94 –ª–∏—Ü–µ–π https://t.me/podslushano94L", reply_markup=keyboard)
    conn.close()

@dp.callback_query_handler(lambda call: call.data == "time_until_summer") #—á–µ–∫–∞–µ–º –∫–æ–≥–¥–∞ –ª–µ—Ç–æ
async def time_until_summer(call: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ time_until_summer –≤—ã–∑–≤–∞–Ω")
    today = datetime.now()
    current_year = today.year

    summer_start = datetime(current_year, 6, 1)
    if today > summer_start:
        summer_start = datetime(current_year + 1, 6, 1)

    days_left = (summer_start - today).days
    await bot.send_message(call.message.chat.id, f"–î–æ –õ–µ—Ç–∞ –û—Å—Ç–∞–ª–æ—Å—å {days_left} –î–Ω–µ–π. \n\n–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.")

@dp.callback_query_handler(lambda call: call.data == "settings")
async def settings(call: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ settings –≤—ã–∑–≤–∞–Ω")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –ö–ª–∞—Å—Å", callback_data="set_class"))
    keyboard.add(types.InlineKeyboardButton("–õ—é–¥–∏ –í –í–∞—à–µ–º –ö–ª–∞—Å—Å–µ", callback_data="class_count"),
                                            types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ü—Ä–æ–µ–∫—Ç", callback_data="support_project"))

    await bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data == "support_project")
async def support_project(call: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ support_project –≤—ã–∑–≤–∞–Ω")
    support_message = (
        "üíñ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç! üíñ\n\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        "üü¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `2200 7012 1417 2980`\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç —á–µ—Ä–µ–∑ Crypto bot:\n"
        "üîó [–û–ø–ª–∞—Ç–∏—Ç—å –ß–µ—Ä–µ–∑ Crypto Bot](https://t.me/send?start=IVpmCRUuT0tZ)\n\n"
        "–ò–ª–∏ –ß–µ—Ä–µ–∑ Xrocket:\n"
        "üîó [Xrocket](https://t.me/xrocket?start=inv_SBgphwxzhKgvekn)\n\n"
        "üí¨ *–í–∞—à–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã!\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å –±–æ—Ç–∞ –∑–∞ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏, –∏ –ª—é–±–∞—è –ø–æ–º–æ—â—å –±—É–¥–µ—Ç –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–∞.\n\n"
        "üîô –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥!"
    )

    # —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤
    support_message = support_message.replace("!", "\\!").replace("~", "\\~").replace("`", "\\`").replace("*", "\\*").replace("_", "\\_").replace("[", "\\[").replace("]", "\\]").replace("(", "\\(").replace(")", "\\)").replace(">", "\\>").replace("#", "\\#").replace("+", "\\+").replace("-", "\\-").replace("=", "\\=").replace("|", "\\|").replace("{", "\\{").replace("}", "\\}").replace(".", "\\.")

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π –∫–∞–≤—ã—á–∫–∏
    support_message = support_message.replace("`2200 7012 1417 2980`", "\\`2200 7012 1417 2980\\`")

    await bot.send_message(call.message.chat.id, support_message, parse_mode='MarkdownV2')


@dp.callback_query_handler(lambda call: call.data == "schedule_calls") #—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ç–æ–º —Å–∞–º–∏ –ø–æ–º–µ–Ω—è–µ—Ç–µ 
async def schedule_calls(call: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ schedule_calls –≤—ã–∑–≤–∞–Ω")
    schedule = {
        "1 –°–º–µ–Ω–∞": [
            "1) 8:00 ‚Äî 8:40 (10 –º–∏–Ω—É—Ç)",
            "2) 8:50 ‚Äî 9:30 (10 –º–∏–Ω—É—Ç)",
            "3) 9:40 ‚Äî 10:20 (10 –º–∏–Ω—É—Ç)",
            "4) 10:30 ‚Äî 11:10 (10 –º–∏–Ω—É—Ç)",
            "5) 11:20 ‚Äî 12:00 (10 –º–∏–Ω—É—Ç)",
            "6) 12:10 ‚Äî 12:50 (5 –º–∏–Ω—É—Ç)",
            "7) 12:55 ‚Äî 13:35"
        ],
        "2 –°–º–µ–Ω–∞": [
            "1) 13:30 ‚Äî 14:10 (10 –º–∏–Ω—É—Ç)",
            "2) 14:20 ‚Äî 15:00 (10 –º–∏–Ω—É—Ç)",
            "3) 15:10 ‚Äî 15:50 (10 –º–∏–Ω—É—Ç)",
            "4) 16:00 ‚Äî 16:40 (10 –º–∏–Ω—É—Ç)",
            "5) 16:50 ‚Äî 17:30 (10 –º–∏–Ω—É—Ç)",
            "6) 17:40 ‚Äî 18:15 (5 –º–∏–Ω—É—Ç)",
            "7) 18:20 ‚Äî 19:00"
        ]
    }
    response_message = ""

    for shift, lessons in schedule.items():
        response_message += f"{shift}\n"
        response_message += "\n".join(lessons) + "\n\n"

    response_message += "–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥."
    await bot.send_message(call.message.chat.id, response_message)

@dp.callback_query_handler(lambda call: call.data == "schedule")
async def schedule(call: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ schedule –≤—ã–∑–≤–∞–Ω")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("1 –°–º–µ–Ω–∞", callback_data="shift_1"))
    keyboard.add(types.InlineKeyboardButton("2 –°–º–µ–Ω–∞", callback_data="shift_2"))

    await bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data in ["shift_1", "shift_2"]) #—Ç—É—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã–µ —É—á–∏—Ç–µ–ª—è –∫–∏–¥–∞—é—Ç –≤—ã—à–µ —Å–≤–æ–π –ø—É—Ç—å —Å–¥–µ–ª–∞–µ—Ç–µ –∫ —Ñ–æ—Ç–æ
async def handle_shift(call: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_shift –≤—ã–∑–≤–∞–Ω")
    shift = "1 –°–º–µ–Ω–∞" if call.data == "shift_1" else "2 –°–º–µ–Ω–∞"
    schedule_image_path = SCHEDULE_IMAGE_SHIFT_1 if shift == "1 –°–º–µ–Ω–∞" else SCHEDULE_IMAGE_SHIFT_2

    with open(schedule_image_path, 'rb') as schedule_image:
        await bot.send_photo(call.message.chat.id, schedule_image)

    await bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.")

@dp.callback_query_handler(lambda call: call.data == "events") #–º–ø –≤—Å—è–∫–∏–µ
async def events(call: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ events –≤—ã–∑–≤–∞–Ω")
    conn = database.create_connection("bot_database.db")
    events_list = database.get_events(conn)

    if events_list:
        response = "\n".join([f"id {event[0]}: {event[1]} (–¥–æ {event[2]})" for event in events_list])
    else:
        response = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data='add_event')) 
    keyboard.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data='remove_event'))

    await bot.send_message(call.message.chat.id, response + "\n\n–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.", reply_markup=keyboard)
    conn.close()

@dp.callback_query_handler(lambda call: call.data == 'add_event')
async def add_event_callback(call: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ add_event –≤—ã–∑–≤–∞–Ω")
    if call.from_user.id == ADMIN_ID:
        await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ù–∞–∑–≤–∞–Ω–∏–µ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ò –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–Ω–µ–π –ï–≥–æ –•—Ä–∞–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–í—Å—Ç—Ä–µ—á–∞ 10'):")
        await dp.current_state(user=call.from_user.id).set_state('waiting_for_event_details')
    else:
        await bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@dp.message_handler(state='waiting_for_event_details')
async def add_event(message: types.Message):
    if message.text:
        conn = database.create_connection("bot_database.db")
        try:
            name, days = message.text.rsplit(' ', 1)
            days = int(days)
            database.add_event(conn, name, days)
            await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        finally:
            conn.close()
            await events(message)

@dp.callback_query_handler(lambda call: call.data == 'remove_event')
async def remove_event_callback(call: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ remove_event –≤—ã–∑–≤–∞–Ω")
    if call.from_user.id == ADMIN_ID:
        await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –î–ª—è –£–¥–∞–ª–µ–Ω–∏—è:")
        await dp.current_state(user=call.from_user.id).set_state('waiting_for_event_id')
    else:
        await bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@dp.message_handler(state='waiting_for_event_id')
async def remove_event(message: types.Message):
    if message.text.isdigit():
        conn = database.create_connection("bot_database.db")
        try:
            event_id = int(message.text)
            database.delete_event(conn, event_id)
            await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        finally:
            conn.close()
            await events(message)

@dp.callback_query_handler(lambda call: call.data == "profile")
async def profile(call: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ profile –≤—ã–∑–≤–∞–Ω")
    conn = database.create_connection("bot_database.db")
    user = database.get_user(conn, call.from_user.id)
    if user:
        response = f"–í–∞—à –ü—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user[1]}\n–ö–ª–∞—Å—Å: {user[2] or '–ù–µ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'} {user[3] or ''}"
    else:
        response = "–ü—Ä–æ—Ñ–∏–ª—å –ù–µ –ù–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    await bot.send_message(call.message.chat.id, response)
    conn.close()

@dp.callback_query_handler(lambda call: call.data == "set_class")
async def set_class(call: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ set_class –≤—ã–∑–≤–∞–Ω")
    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ö–ª–∞—Å—Å –ò –ë—É–∫–≤—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: '10 A' –ø—Ä–æ–±–µ–ª –≤–∞–∂–µ–Ω!):")
    await dp.current_state(user=call.from_user.id).set_state('waiting_for_class')

@dp.message_handler(state='waiting_for_class')
async def update_class(message: types.Message):
    if message.text:
        conn = database.create_connection("bot_database.db")
        try:
            parts = message.text.split()
            if len(parts) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –∏ –±—É–∫–≤—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '10 A'.")
            class_name, class_letter = parts
            database.update_user_class(conn, message.from_user.id, class_name, class_letter)
            await message.answer("–ö–ª–∞—Å—Å –û–±–Ω–æ–≤–ª—ë–Ω.")
        except ValueError as ve:
            await message.answer(str(ve))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        finally:
            conn.close()

        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await dp.current_state(user=message.from_user.id).reset_state()

        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await start(message)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –∏ –±—É–∫–≤—É.")

@dp.callback_query_handler(lambda call: call.data == "class_count")
async def class_count(call: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ class_count –≤—ã–∑–≤–∞–Ω")
    conn = database.create_connection("bot_database.db")
    user = database.get_user(conn, call.from_user.id)
    if user and user[2]:
        class_name = user[2]
        class_letter = user[3]
        count = database.get_class_count(conn, class_name, class_letter)
        await bot.send_message(call.message.chat.id, f"–í –í–∞—à–µ–º –ö–ª–∞—Å—Å–µ {count} –ß–µ–ª–æ–≤–µ–∫(–∞).")
    else:
        await bot.send_message(call.message.chat.id, "–í–∞—à –ö–ª–∞—Å—Å –ù–µ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–π–¥–∏—Ç–µ –í –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –î–ª—è –ï–≥–æ –£—Å—Ç–∞–Ω–æ–≤–∫–∏.") #–ø—Ä–æ–≤–µ—Ä–æ—á–∫–∞
    conn.close()

if __name__ == '__main__':
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    conn = database.create_connection("bot_database.db")
    database.create_table(conn)
    conn.close()

    executor.start_polling(dp, skip_updates=True)
